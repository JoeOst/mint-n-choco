<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\db\Query;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "author".
 *
 * @property integer $id
 * @property string $name
 *
 * @property Book[] $books
 */
class Author extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'author';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name'], 'string', 'max' => 255],
            [['name', 'biography'], 'string'],
            [['birth'], 'date','format'=>'php:Y-m-d'],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => "Ім'я",
            'birth' => 'Дата народження',
            'biography' => 'Про автора',
            'photo' => 'Фото',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBooks()
    {
        return $this->hasMany(Book::className(), ['author_id' => 'id']);
    }

    public static function getAll($pageSize = 20) {
        // build a DB query to get all articles with status = 1
        $query = Author::find()->orderBy('name');

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the articles
        $authors = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        $data['authors'] = $authors;
        $data['pagination'] = $pagination;

        return $data;
    }

    public static function getAllLetter() {
        //$query = (new Query())->select(['LEFT(name,1) AS firstletter'])->distinct()->from('author')->all();
        $query = Author::find()->select(['firstletter' => 'LEFT(name,1)'])->distinct(true)->orderBy('firstletter')->asArray()->all();
        return ArrayHelper::getColumn($query, 'firstletter');

    }

    public static function getBooksByAuthor($id) {
        // build a DB query to get all articles
        $query = Book::find()->where(['author_id'=> $id]);


        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => 2]);

        // limit the query using the pagination and retrieve the articles
        $books = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        $data['books'] = $books;
        $data['pagination'] = $pagination;

        return $data;
    }

    public function saveImage($filename) {

        $this->photo = $filename;

        return $this->save(false);
    }

    public function getImage() {
        return ($this->photo) ? '/uploads/' . $this->photo : '/no-images.png';
    }

    public function deleteImage() {

        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->photo);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getBirth() {

        return Yii::$app->formatter->asDate($this->birth);
    }
}
