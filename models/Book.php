<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "book".
 *
 * @property integer $id
 * @property string $title
 * @property string $annotation
 * @property string $text
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $author_id
 * @property integer $status
 * @property double $mark
 * @property integer $voted
 * @property double $rating
 *
 * @property Author $author
 * @property BookGenre[] $bookGenres
 * @property Comment[] $comments
 */
class Book extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'book';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['annotation'], 'required'],
            [['title', 'annotation', 'text'], 'string'],
            [['date'], 'date','format'=>'php:Y-m-d'],
            [['date'], 'default','value'=>date('Y-m-d')],
            [['status'], 'integer'],
            [['status'], 'default', 'value'=>'0'],
            [['title'], 'string', 'max'=>255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Назва',
            'annotation' => 'Анотація',
            'text' => 'Текст',
            'date' => 'Date',
            'image' => 'Зображення',
            'viewed' => 'Перегляди',
            'author_id' => 'Author ID',
            'status' => 'Статус',
            'mark' => 'Оцінка',
            'voted' => 'Voted',
            'rating' => 'Рейтинг',
        ];
    }

    public function saveImage($filename) {

        $this->image = $filename;

        return $this->save(false);
    }

    public function getImage() {
        return ($this->image) ? '/uploads/' . $this->image : '/no-images.png';
    }

    public function deleteImage() {

        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(Author::className(), ['id' => 'author_id']);
    }

    public function saveAuthor($author_id) {
        $author = Author::findOne($author_id);
        if ($author != null) {
            $this->link('author', $author);
            return true;
        }
    }

    public function getGenres()
    {
        return $this->hasMany(Genre::className(), ['id' => 'genre_id'])
            ->viaTable('book_genre', ['book_id' => 'id']);
    }


    public function getSelectedGenres() {

        $selectedGenres = $this->getGenres()->select('id')->asArray()->all();

        return ArrayHelper::getColumn($selectedGenres, 'id');

    }
    public function saveGenres($genres)
    {
        if (is_array($genres)) {

            $this->clearCurrentGenres();

            foreach ($genres as $genre_id) {
                $genre = Genre::findOne($genre_id);
                $this->link('genres', $genre);

            }
        }
    }
    private function clearCurrentGenres()
    {
        BookGenre::deleteAll(['book_id'=>$this->id]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['book_id' => 'id']);
    }

    public function getDate() {

        return Yii::$app->formatter->asDate($this->date);
    }

    public static function getAll($pageSize = 5) {
        // build a DB query to get all articles with status = 1
        $query = Book::find()->where(['status' => 1])->orderBy('rating desc');

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the articles
        $books = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        $data['books'] = $books;
        $data['pagination'] = $pagination;

        return $data;
    }

    public static function getNew($pageSize = 5) {
        // build a DB query to get all articles with status = 1
        $query = Book::find()->where(['status' => 1])->orderBy('date desc');

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the articles
        $books = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        $data['books'] = $books;
        $data['pagination'] = $pagination;

        return $data;
    }

    public static function getTop() {
       return Book::find()->orderBy('rating desc')->limit(10)->all();
    }
}
